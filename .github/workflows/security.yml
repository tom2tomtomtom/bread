name: Security & Dependency Checks

on:
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Security vulnerability scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security scan with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
        continue-on-error: true

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

  # Dependency analysis
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Check for outdated dependencies
  outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "Outdated dependencies found"
            cat outdated.json
          else
            echo "All dependencies are up to date"
          fi

      - name: Create issue for outdated dependencies
        if: hashFiles('outdated.json') != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
              
              if (Object.keys(outdated).length > 0) {
                let body = 'ðŸ”„ **Automated Dependency Update Report**\n\n';
                body += 'The following dependencies have updates available:\n\n';
                
                for (const [pkg, info] of Object.entries(outdated)) {
                  body += `### ${pkg}\n`;
                  body += `- **Current**: ${info.current}\n`;
                  body += `- **Wanted**: ${info.wanted}\n`;
                  body += `- **Latest**: ${info.latest}\n`;
                  body += `- **Type**: ${info.type}\n\n`;
                }
                
                body += '---\n';
                body += '*This issue was automatically created by the security workflow.*\n';
                body += '*Please review and update dependencies as needed.*';
                
                // Check if issue already exists
                const { data: issues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'dependencies'
                });
                
                const existingIssue = issues.find(issue => 
                  issue.title.includes('Dependency Update Report')
                );
                
                if (existingIssue) {
                  // Update existing issue
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    body: body
                  });
                } else {
                  // Create new issue
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: 'ðŸ”„ Automated Dependency Update Report',
                    body: body,
                    labels: ['dependencies', 'maintenance']
                  });
                }
              }
            } catch (error) {
              console.log('No outdated dependencies or error parsing JSON');
            }
